0..4
[0..4]
c(0..4)
c(0:4)
sample(c(1:4),100)
sample(c(1:4),100,true)
sample(c(1:4),100,replace=TRUE)
rbinom(1,1000,1e-5)
rbinom(1,1000,1e-4)
rbinom(1,1000,1e-3)
rbinom(1,1000,1e-3)
rbinom(1,1000,1e-3)
rbinom(1,1000,1e-3)
rbinom(1,1000,1e-3)
rbinom(1,1000,1e-3)
rbinom(1,1000,1e-3)
rbinom(100,1000,1e-3)
5%/%3
5%%3
sample(c(1:4),100,replace=TRUE) -> x
x
y <- x + sample(1:3, 100, F)
length(x)
y <- x + sample(1:3, 100, T)
y
y %% 4
y %% 5
require(tidyverse)
c(0:3)
seq <- sample(c(0:3),100,true)
seq <- sample(c(0:3),100,T)
seq
t = rbinom(1,100,1)
t
t = rbinom(1,100,.01)
t
t
t = rbinom(1,100,.01)
t
t = rbinom(100,100,.01)
t
S <- sample(1:100, 2, replace=F)
s
S
m <- seq[S] + sample(1:3, 2, T)
m
seq[S]
m%%4
seq[S] <- m %% 4
seq[S]
seq
mutant <- list(seq, 2)
mutant
list(seq1, nmut) <- mutant
seq1 <- mutant[[1]]
seq1
seq1 == seq
seqs <- seq
seqs[0]
seqs
seqs <- list(seq)
seqs[[0]]
seqs[[1]]
seqs
seqs <- c(seqs, seq)
seqs
seqs <- list(seq)
seqs <- c(seqs, list(seq))
seqs
cumsum(seq)
mutate <- function(seq, mu){
### procedure to mutate the sequence in each generation
L <- length(seq)
t <- rbinom(1,L,mu) # this sets the number of sites to mutate
S <- sample(1:L, size = t, replace = FALSE) # pick the sites to mutate
m <- seq[S] + sample(1:3, t, T) # this adds a random integer between 1-3 to the original value.
seq[S] <- m %% 4 # this will take anything greater than 3 to "circle back"
return(list(seq, t))
}
evolve <- function(seq, mu, N){
### evolve the sequence over N generations
seqs <- list(seq) # record the genotype of each generation
nmut <- 0   # counter for the number of mutations that *occurred* in each generation
Nobs <- 0   # counter for the number of *observed* mutations
for( i in 1:N ){
mutant <- mutate(seq, mu) # perform mutation
seq <- mutant[[1]]  # extract the mutated sequence, which will be the starting point for the next generation
seqs <- c(seqs, list(seq)) # record the genotype at this generation
nmut <- c(nmut, mutant[[2]]) # record the number of mutations that *occurred* at this generation
Nobs <- c(Nobs, sum(seqs[[1]] == seq)) # this records the number of *observed* mutations
}
return(list(seqs, nmut, Nobs))
}
# starting point
seq <- sample(c(0:3), size = 1000, replace = TRUE)
out <- evolve(seq, mu = 0.001, N = 1000)
seqs <- out[[1]]
nmut <- out[[2]]; Nmut <- cumsum(nmut) # count the total # of mutations up to generation i
Nobs <- out[[3]]
plot(Nmut, Nobs)
mutate <- function(seq, mu){
### procedure to mutate the sequence in each generation
L <- length(seq)
t <- rbinom(1,L,mu) # this sets the number of sites to mutate
S <- sample(1:L, size = t, replace = FALSE) # pick the sites to mutate
m <- seq[S] + sample(1:3, t, T) # this adds a random integer between 1-3 to the original value.
seq[S] <- m %% 4 # this will take anything greater than 3 to "circle back"
return(list(seq, t))
}
evolve <- function(seq, mu, N){
### evolve the sequence over N generations
seqs <- list(seq) # record the genotype of each generation
nmut <- 0   # counter for the number of mutations that *occurred* in each generation
Nobs <- 0   # counter for the number of *observed* mutations
for( i in 1:N ){
mutant <- mutate(seq, mu) # perform mutation
seq <- mutant[[1]]  # extract the mutated sequence, which will be the starting point for the next generation
seqs <- c(seqs, list(seq)) # record the genotype at this generation
nmut <- c(nmut, mutant[[2]]) # record the number of mutations that *occurred* at this generation
Nobs <- c(Nobs, sum(seqs[[1]] != seq)) # this records the number of *observed* mutations
}
return(list(seqs, nmut, Nobs))
}
# starting point
seq <- sample(c(0:3), size = 1000, replace = TRUE)
out <- evolve(seq, mu = 0.001, N = 1000)
seqs <- out[[1]]
nmut <- out[[2]]; Nmut <- cumsum(nmut) # count the total # of mutations up to generation i
Nobs <- out[[3]]
plot(Nmut, Nobs, type = "line")
# starting point
seq <- sample(c(0:3), size = 1000, replace = TRUE)
out <- evolve(seq, mu = 0.001, N = 100000)
seqs <- out[[1]]
nmut <- out[[2]]; Nmut <- cumsum(nmut) # count the total # of mutations up to generation i
Nobs <- out[[3]]
plot(Nmut, Nobs, type = "l")
1+1
